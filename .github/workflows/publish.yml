# This workflow builds a docker container, publishes it in dockerhub, and then deploys a new image into
#
# To configure this workflow:
#
# 1. Ensure that your repository contains a Dockerfile
# 2. Setup secrets
#

name: Build, Publish and Deploy to Cloud Foundry

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  IBM_CLOUD_REGION: us-south
  DOCKER_USER: foodspotgroup
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  IMAGE_NAME: foodspot-server
  CLOUDANT_API_KEY: ${{ secrets.CLOUDANT_API_KEY }}
  CLOUDANT_ID: ${{ secrets.CLOUDANT_ID }}
  TOKEN_SECRET: ${{ secrets.TOKEN_SECRET }}
  DISCORD_BOT: Pipeline
  DISCORD_PIPELINE_WEBHOOK: ${{ secrets.DISCORD_PIPELINE_WEBHOOK }}

jobs:

  # Builds the docker image
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Docker login
        run: echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USER} --password-stdin

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v4.9

      - name: Get docker image tags
        id: get-tags
        run: |
          branch_name="${{ steps.branch-name.outputs.current_branch }}"
          escaped_branch=$(echo $branch_name | sed -e 's/[^0-9A-Za-z-]/-/g')
          last_sha=${GITHUB_SHA: -5}
          image_tag="${escaped_branch}"-"${last_sha}"
          branch_image="${DOCKER_USER}"/"${IMAGE_NAME}":"${image_tag}"
          latest_image="${DOCKER_USER}"/"${IMAGE_NAME}":latest"
          echo "::set-output name=branch_image::${branch_image}"
          echo "::set-output name=latest_image::${latest_image}"

      - name: Build image with Docker
        id: build-image
        run: |
          branch_image="${{steps.get-tags.outputs.branch_image}}"
          latest_image="${{steps.get-tags.outputs.latest_image}}"
          docker build -t "${branch_image}" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .
          docker build -t "${latest_image}" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      - name: Send success message to Discord
        if: ${{ success() }}
        run: |
          branch_image="${{steps.get-tags.outputs.branch_image}}"
          latest_image="${{steps.get-tags.outputs.latest_image}}"
          message="Successfully built and deployed the following to Dockerhub:\n- \`${branch_image}\`\n- \`${latest_image}\`"
          curl -H "Content-Type: application/json" \
            -d "{\"username\": \"${DISCORD_BOT}\", \"content\": \"${message}\"}" \
            ${DISCORD_PIPELINE_WEBHOOK}

      - name: Send error message to Discord
        if: ${{ failure() }}
        run: |
          branch_image="${{steps.get-tags.outputs.branch_image}}"
          latest_image="${{steps.get-tags.outputs.latest_image}}"
          branch_name="${{ steps.branch-name.outputs.current_branch }}"
          message="Error deploying the following to Dockerhub:\n- \`${branch_image}\`\n- \`${latest_image}\`"
          curl -H "Content-Type: application/json" \
            -d "{\"username\": \"${DISCORD_BOT}\", \"content\": \"${message}\"}" \
            ${DISCORD_PIPELINE_WEBHOOK}

  # Deploys the new image to IBM cloud foundry
  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      # Checkout the branch
      - uses: actions/checkout@v2
      # Install IBM Cloud and Login
      # Injecting the secrets to the manifest.yml
      - name: Overwrite manifest with secrets
        run: |
          sed -i "s/{{ CLOUDANT_ID }}/${CLOUDANT_ID}/gi" manifest.yml
          sed -i "s/{{ CLOUDANT_API_KEY }}/${CLOUDANT_API_KEY}/gi" manifest.yml
          sed -i "s/{{ TOKEN_SECRET }}/${TOKEN_SECRET}/gi" manifest.yml
          cat manifest.yml

